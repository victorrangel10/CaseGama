package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SimuladoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSimuladoAllPropertiesEquals(Simulado expected, Simulado actual) {
        assertSimuladoAutoGeneratedPropertiesEquals(expected, actual);
        assertSimuladoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSimuladoAllUpdatablePropertiesEquals(Simulado expected, Simulado actual) {
        assertSimuladoUpdatableFieldsEquals(expected, actual);
        assertSimuladoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSimuladoAutoGeneratedPropertiesEquals(Simulado expected, Simulado actual) {
        assertThat(actual)
            .as("Verify Simulado auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSimuladoUpdatableFieldsEquals(Simulado expected, Simulado actual) {
        assertThat(actual)
            .as("Verify Simulado relevant properties")
            .satisfies(a -> assertThat(a.getNotaMat()).as("check notaMat").isEqualTo(expected.getNotaMat()))
            .satisfies(a -> assertThat(a.getNotaPort()).as("check notaPort").isEqualTo(expected.getNotaPort()))
            .satisfies(a -> assertThat(a.getNotaLang()).as("check notaLang").isEqualTo(expected.getNotaLang()))
            .satisfies(a -> assertThat(a.getNotaHum()).as("check notaHum").isEqualTo(expected.getNotaHum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSimuladoUpdatableRelationshipsEquals(Simulado expected, Simulado actual) {
        assertThat(actual)
            .as("Verify Simulado relationships")
            .satisfies(a -> assertThat(a.getAluno()).as("check aluno").isEqualTo(expected.getAluno()));
    }
}
